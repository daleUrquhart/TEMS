<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Identifiers -->
    <groupId>com.tems</groupId>
    <artifactId>TEMS</artifactId>
    <version>1.0-SNAPSHOT</version> 
    <packaging>jar</packaging>

    <!-- Metadata -->
    <name>TEMS</name> 
    <description>JavaFX Application for TEMS</description>

    <!-- Compiler properties -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.release>21</maven.compiler.release>
        <izpack.version>5.0.9</izpack.version>
        <izpack.staging>$target/staging</izpack.staging>
    </properties>

    <dependencies>
        <!-- ControlsFX for additional UI components -->
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>11.2.0</version> <!-- Check for latest version -->
        </dependency>
        <!-- JUnit 5 for Unit Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.0</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
        <!-- DotEnv for accessing .env variables -->
        <dependency>
            <groupId>io.github.cdimascio</groupId>
            <artifactId>dotenv-java</artifactId>
            <version>3.0.2</version>
        </dependency>
        <!-- BCrypt for password hashing -->
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <!-- SLF4J for error logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.32</version> 
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.14</version>
        </dependency>
        <!-- Spring Framework -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>6.2.2</version>
        </dependency> 
         <!-- MariaDB Connector/J (MariaDB client) -->
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>3.5.0</version>
        </dependency>
        <!-- Hikari DB Connector -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>6.2.1</version>
        </dependency>
        <!-- JavaFX and FXML (for JavaFX UI components) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>21.0.6</version>
            <classifier>win</classifier>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>21.0.6</version>
            <classifier>win</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>21.0.6</version> 
        </dependency>
        <!-- JFoenix for easier CSS design -->
        <dependency>
            <groupId>com.jfoenix</groupId>
            <artifactId>jfoenix</artifactId>
            <version>9.0.1</version>
        </dependency> 
    </dependencies>

    <build>
        <pluginManagement>
            <!-- https://akman.github.io/jpackage-maven-plugin/examples/from-runtime-image.html -->
            <plugins>
            <plugin>
                <groupId>com.github.akman</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <version>0.1.5</version>
                <configuration>
                <!--
                    Specifies the JDK home path which provides the tool needed.
                    If not specified the jpackage tool executable will be find in
                    the following order:
                
                    - user specified JDK home directory by toolchains-plugin
                    - JDK home directory specified by system variable JAVA_HOME
                    - system path specified by system variable PATH
                -->
                <toolhome>$‍{env.JPACKAGE_HOME}</toolhome>
                
                <!--
                    Specifies the location in which generated output files are placed.
                    Default value: $‍{project.build.directory}/jpackage
                -->
                <dest>$‍{project.build.directory}/jpackage</dest>
                
                <!--
                    Specifies the name of subdirectory relative to the destination
                    directory in which files of generated application image are placed.
                -->
                <name>appname</name>
                
                <!--
                    Specifies the type of package to
                    create: { PLATFORM | IMAGE | EXE | MSI }.
                    Default value: PLATFORM (a platform dependent default type)
                -->
                <type>IMAGE</type>
                
                <!--
                    Specifies the location of the predefined runtime
                    image (result of jlink) that will be copied into
                    the application image.
                    If not specified, jpackage will run jlink to create
                    the runtime image using options:
                    - strip-debug
                    - no-header-files
                    - no-man-pages
                    - strip-native-commands
                -->
                <runtimeimage>$‍{project.build.directory}/jlink/runtime-image</runtimeimage>
                
                <!--
                    Specifies version of the application and/or package.
                -->
                <appversion>1.0</appversion>
                
                <!--
                    Specifies copyright for the application.
                -->
                <copyright>Copyright</copyright>
                
                <!--
                    Specifies description of the application.
                -->
                <description>Description</description>
                
                <!--
                    Specifies vendor of the application.
                -->
                <vendor>Vendor</vendor>
                
                <!--
                    Specifies the location of the icon of the application package.
                -->
                <icon>$‍{project.basedir}/config/jpackage/resources/appname.ico</icon>
                
                <!--
                    Specifies the main module (and optionally main class) of
                    the application. This module must be located on the module path.
                    When this option is specified, the main module will be linked
                    in the Java runtime image.
                    Either module or main-jar option can be specified
                    but not both.
                -->
                <module>appModuleName/appClassName</module>
                
                <!--
                    Specifies the command line arguments to pass to the main class
                    if no command line arguments are given to the launcher.
                -->
                <arguments>--opt</arguments>
                
                <!--
                    Specifies the options to pass to the Java runtime.
                -->
                <javaoptions>-Dfile.encoding=UTF-8 -Xms256m -Xmx512m</javaoptions>
                
                <!--
                    Specifies options are added to, or used to overwrite,
                    the original command line options to build additional
                    alternative launchers.
                -->
                <addlaunchers>
                    <addlauncher>
                    <name>appname-cli</name>
                    <module>appModuleName/appClassName</module>
                    <arguments>--help</arguments>
                    <javaoptions>-Xms256m -Xmx512m</javaoptions>
                    <appversion>1.0</appversion>
                    <icon>$‍{project.basedir}/config/jpackage/resources/appname-cli.ico</icon>
                    <winconsole>true</winconsole>
                    </addlauncher>
                </addlaunchers>
                
                <!--
                    Specifies the location of a resources directory that override
                    jpackage resources. Icons, template files, and other resources
                    of jpackage can be overridden by adding replacement resources
                    to this directory.
                -->
                <resourcedir>$‍{project.basedir}/config/jpackage/resources</resourcedir>
                </configuration>
            </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            
            <!-- https://akman.github.io/jpackage-maven-plugin/examples/from-runtime-image.html -->
            <plugin>
                <groupId>com.github.akman</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <executions>
                <execution>
                    <id>jpackage-image</id>
                    <phase>verify</phase>
                    <goals>
                    <goal>jpackage</goal>
                    </goals>
                </execution>
                </executions>
            </plugin>
            <!-- Packing asset -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <archive>
                                <manifest>
                                    <mainClass>com.tems.Main</mainClass> 
                                </manifest>
                            </archive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Packaging asset -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                target/dependency
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Maven Compiler Plugin to use Java 21 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>21</release>
                </configuration>
            </plugin>


            <!-- Maven Surefire Plugin to run JUnit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                </configuration>
            </plugin>

            <!-- JavaFX Maven Plugin for packaging and running JavaFX apps -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>com.tems.Main</mainClass>
                </configuration>

            </plugin>
            
            <!-- Packaging plugin -->
            <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.1.1</version>
            <configuration>
                <archive>
                    <manifest>
                        <addClasspath>true</addClasspath>
                        <classpathPrefix>lib/</classpathPrefix>
                        <mainClass>com.tems.Main</mainClass>
                    </manifest>
                </archive>
            </configuration>
        </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
        </repository>
    </repositories>
</project>
